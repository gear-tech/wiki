"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9166],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=a,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},675:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_label:"\u5408\u7ea6\u6d4b\u8bd5",sidebar_position:4},l="\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6",p={unversionedId:"developing-contracts/testing",id:"developing-contracts/testing",title:"\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6",description:"Gear \u56e2\u961f\u63d0\u4f9b\u7684 gtest \u5e93\u662f\u667a\u80fd\u5408\u7ea6\u903b\u8f91\u6d4b\u8bd5\u7684\u63a8\u8350\u9009\u9879\u3002\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528 gtest \u6765\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u6d4b\u8bd5\u3002",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/testing.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/testing",permalink:"/zh-cn/developing-contracts/testing",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/testing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"\u5408\u7ea6\u6d4b\u8bd5",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"\u5408\u7ea6\u4ea4\u4e92",permalink:"/zh-cn/developing-contracts/interactions-between-programs"},next:{title:"\u90e8\u7f72",permalink:"/zh-cn/developing-contracts/deploy"}},m={},u=[{value:"\u57fa\u7840\u4fe1\u606f",id:"\u57fa\u7840\u4fe1\u606f",level:2},{value:"\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efa\u667a\u80fd\u5408\u7ea6",id:"\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efa\u667a\u80fd\u5408\u7ea6",level:2},{value:"\u5f15\u5165 <code>gtest</code> \u5e93",id:"\u5f15\u5165-gtest-\u5e93",level:2},{value:"\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898",id:"\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898",level:2},{value:"<code>gtest</code> \u7684\u80fd\u529b",id:"gtest-\u7684\u80fd\u529b",level:2}],c={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6"},"\u5982\u4f55\u6d4b\u8bd5\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6"),(0,o.kt)("p",null,"Gear \u56e2\u961f\u63d0\u4f9b\u7684 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear/tree/master/gtest"},(0,o.kt)("inlineCode",{parentName:"a"},"gtest"))," \u5e93\u662f\u667a\u80fd\u5408\u7ea6\u903b\u8f91\u6d4b\u8bd5\u7684\u63a8\u8350\u9009\u9879\u3002\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"gtest")," \u6765\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u6d4b\u8bd5\u3002"),(0,o.kt)("h2",{id:"\u57fa\u7840\u4fe1\u606f"},"\u57fa\u7840\u4fe1\u606f"),(0,o.kt)("p",null,"Gear \u4f7f\u7528\u4e86\u6765\u81ea ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo")," \u6784\u5efa\u7684 Rust \u7a0b\u5e8f\u6807\u51c6\u6d4b\u8bd5\u673a\u5236\u3002"),(0,o.kt)("p",null,"\u6839\u636e ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch11-00-testing.html"},"Rustbook")," \u4e2d\u63cf\u8ff0\u7684\u57fa\u672c\u6982\u5ff5\u548c\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u6d4b\u8bd5\u53ef\u4ee5\u88ab\u7ec4\u7ec7\u6210\u4e24\u4e2a\u4e3b\u8981\u7c7b\u522b\u3002",(0,o.kt)("strong",{parentName:"p"},"\u5355\u5143\u6d4b\u8bd5"),"\u548c",(0,o.kt)("strong",{parentName:"p"},"\u96c6\u6210\u6d4b\u8bd5"),"\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5355\u5143\u6d4b\u8bd5"),"\u80fd\u591f\u5bf9\u6bcf\u4e2a\u5355\u5143\u7684\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u4e0e\u5176\u4ed6\u4ee3\u7801\u9694\u79bb\u3002\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5feb\u901f\u627e\u5230\u4ee3\u7801\u5728\u54ea\u4e9b\u5730\u65b9\u6309\u7167\u9884\u671f\u5de5\u4f5c\uff0c\u54ea\u4e9b\u5730\u65b9\u6ca1\u6709\u3002\u5355\u5143\u6d4b\u8bd5\u5e94\u8be5\u653e\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"src"),"\u76ee\u5f55\u4e0b\uff0c\u4e0e\u5b83\u4eec\u6240\u6d4b\u8bd5\u7684\u4ee3\u7801\u4e00\u8d77\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u3002"),(0,o.kt)("p",null,"\u5373\u4f7f\u5355\u5143\u4ee3\u7801\u5de5\u4f5c\u6b63\u5e38\uff0c\u5bf9\u4ee3\u7801\u5e93\u7684\u51e0\u4e2a\u90e8\u5206\u662f\u5426\u4e5f\u80fd\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u8fdb\u884c\u6d4b\u8bd5\u4e5f\u5f88\u91cd\u8981\u3002\u5bf9\u4e8e",(0,o.kt)("strong",{parentName:"p"},"\u96c6\u6210\u6d4b\u8bd5"),"\uff0c\u9700\u8981\u5728\u9879\u76ee\u76ee\u5f55\u7684\u9876\u5c42\uff0c\u5373`src'\u65c1\u8fb9\u5efa\u7acb\u4e00\u4e2a\u5355\u72ec\u7684\u6d4b\u8bd5\u76ee\u5f55\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u6dfb\u52a0\u4efb\u610f\u591a\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0cCargo \u4f1a\u628a\u6bcf\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684 crate \u6765\u7f16\u8bd1\u3002"),(0,o.kt)("h2",{id:"\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efa\u667a\u80fd\u5408\u7ea6"},"\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u6784\u5efa\u667a\u80fd\u5408\u7ea6"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u786e\u4fdd\u4f60\u60f3\u6d4b\u8bd5\u7684\u7a0b\u5e8f\u5df2\u7ecf\u7f16\u8bd1\u6210 ",(0,o.kt)("inlineCode",{parentName:"p"},"WASM")," \u6587\u4ef6\u3002\u4f60\u53ef\u4ee5\u53c2\u8003 ",(0,o.kt)("a",{parentName:"p",href:"/zh-cn/getting-started-in-5-minutes"},"Getting started")," \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u901a\u5e38\u60c5\u51b5 Gear \u667a\u80fd\u5408\u7ea6\u7f16\u8bd1\u9700\u8981\u91c7\u7528\u4ee5\u4e0b\u5f3a\u5236\u6027\u53c2\u6570\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'RUSTFLAGS="-C link-args=--import-memory"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--target=wasm32-unknown-unknown")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nightly")," \u0441ompiler")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'cd ~/gear/contracts/first-gear-app/\nRUSTFLAGS="-C link-args=--import-memory" cargo +nightly build --release --target=wasm32-unknown-unknown\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0c\u4ee5\u4e0a\u53c2\u6570 ",(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u5e94\u5f53\u4f7f\u7528"),"\uff0c\u800c\u662f ",(0,o.kt)("strong",{parentName:"p"},"\u5e94\u5f53")," \u91c7\u7528\u4ee5\u4e0b\u6761\u4ef6\u8fdb\u884c\u4fee\u6539\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--target")," \u53c2\u6570\u4e0d\u8981\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"wasm32-unknown-unknown"),"\u3002\u5efa\u8bae\u6839\u636e\u4f60\u7684\u8bbe\u5907\u67b6\u6784\u6765\u6784\u5efa\uff08\u4f60\u6839\u672c\u4e0d\u9700\u8981\u6307\u5b9a\u4efb\u4f55\u6807\u5fd7\uff09\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nightly")," \u7f16\u8bd1\u5668\u3002\u5982\u679c\u4f60\u7684\u667a\u80fd\u5408\u7ea6\u4f7f\u7528\u4e86\u5c1a\u4e0d\u7a33\u5b9a\u7684 Rust \u7279\u6027\uff0c\u5219\u9700\u8981\u3002\u7f16\u8bd1\u5668\u4f1a\u8981\u6c42\u4f60\u5728\u5fc5\u8981\u65f6\u542f\u7528 ",(0,o.kt)("inlineCode",{parentName:"li"},"nightly"),"\u3002\u53ea\u6709\u5f53\u4f60\u628a\u6d4b\u8bd5\u5199\u6210\u5355\u5143\u6d4b\u8bd5/\u96c6\u6210\u6d4b\u8bd5\uff0c\u800c\u4e0d\u662f\u63d0\u4f9b\u4e00\u4e2a\u5355\u72ec\u7684\u53ea\u5305\u542b\u6d4b\u8bd5\u7684\u5e93\u3002")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cargo test\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u5982\u679c\u4f60\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo")," \u914d\u7f6e\u6587\u4ef6\uff0c\u90a3\u4e48\u8bf7\u8bb0\u4f4f\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"[build]")," \u53c2\u6570\u540c\u65f6\u4f5c\u7528\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo build")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo test")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/cargo/issues/6784"},"Github Issue"),"\u3002\u4f8b\u5982 -"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'# .cargo/config.toml\n[build]\ntarget = "wasm32-unknown-unknown"\n\n[target.wasm32-unknown-unknown]\nrustflags = ["-C", "link-args=--import-memory"]\n')),(0,o.kt)("p",{parentName:"li"},"\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5fc5\u987b\u9009\u62e9\u5bf9\u4f60\u6765\u8bf4\u6700\u4fbf\u6377\u7684\u65b9\u6848\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"(\u63a8\u8350) \u4ece ",(0,o.kt)("inlineCode",{parentName:"p"},"config.toml")," \u4e2d\u79fb\u9664 ",(0,o.kt)("inlineCode",{parentName:"p"},"target=wasm32-unknown-unknown"),", \u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\uff1a"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u7f16\u8bd1\u5408\u7ea6\u65f6\u4f7f\u7528: ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo +nightly build --target wasm32-unknown-unknown")),(0,o.kt)("li",{parentName:"ul"},"\u6d4b\u8bd5\u5408\u7ea6\u65f6\u4f7f\u7528: ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo test")," (\u53ef\u9009: ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo +nightly test"),")"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fdd\u7559\u7f16\u8bd1\u76ee\u6807, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u7f16\u8bd1\u5408\u7ea6\u65f6\u4f7f\u7528: ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo +nightly build")),(0,o.kt)("li",{parentName:"ul"},"\u6d4b\u8bd5\u5408\u7ea6\u65f6\u4f7f\u7528: ",(0,o.kt)("inlineCode",{parentName:"li"},"cargo test --target any_not_wasm32_unknown_unknown_target")))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rust \u6240\u652f\u6301\u7684\u6bcf\u4e00\u7f16\u8bd1\u76ee\u6807\u90fd\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u547d\u4ee4\u4e2d\u83b7\u5f97:\n",(0,o.kt)("inlineCode",{parentName:"p"},"rustc --print target-list")))),(0,o.kt)("p",null,"\u5982\u4f55\u627e\u51fa\u4f60\u7684\u7cfb\u7edf\u76ee\u6807\uff0c",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/52996949/how-can-i-find-the-current-rust-compilers-default-llvm-target-triple?rq=1"},"\u8fd9\u91cc"),"\u3002"),(0,o.kt)("p",null,"\u56e0\u6b64\uff0c\u8fd0\u884c\u6d4b\u8bd5\u7684\u6700\u666e\u904d\u65b9\u6cd5\u5c06\u662f:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cargo test --target \"$(rustc -vV | sed -n 's|host: ||p')\"\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"sed")," \u5de5\u5177\u5728 Windows \u4e2d\u9ed8\u8ba4\u6ca1\u6709\u5b89\u88c5")),(0,o.kt)("p",null,"\u66f4\u591a\u5173\u4e8e Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u4fe1\u606f\u8bf7\u53c2\u8003\u8003 ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/reference/config.html"},"Cargobook"),"."),(0,o.kt)("h2",{id:"\u5f15\u5165-gtest-\u5e93"},"\u5f15\u5165 ",(0,o.kt)("inlineCode",{parentName:"h2"},"gtest")," \u5e93"),(0,o.kt)("p",null,"\u4e3a\u4e86\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"gtest")," \u5e93\uff0c\u5b83\u5fc5\u987b\u88ab\u5bfc\u5165\u4f60\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," \u6587\u4ef6\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"[dev-dependencies]")," \u4e2d\uff0c\u4ee5\u4fbf\u53ea\u5728\u6d4b\u8bd5\u65f6\u83b7\u53d6\u548c\u7f16\u8bd1\u5b83\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'[package]\nname = "first-gear-app"\nversion = "0.1.0"\nauthors = ["Your Name"]\nedition = "2021"\nlicense = "GPL-3.0"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\ngstd = { git = "https://github.com/gear-tech/gear.git", features = ["debug"] }\n\n[dev-dependencies]\ngtest = { git = "https://github.com/gear-tech/gear.git" }\n\n[profile.release]\nlto = true\nopt-level = \'s\'\n')),(0,o.kt)("h2",{id:"\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898"},"\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898"),(0,o.kt)("p",null,"\u5f53\u628a\u6d4b\u8bd5\u5199\u6210\u96c6\u6210\u6d4b\u8bd5\u65f6\uff0c\u4e0d\u80fd\u4ece\u7a0b\u5e8f\u672c\u8eab\u5bfc\u5165\u516c\u5171\u7ed3\u6784\uff0c\u56e0\u4e3a Gear \u667a\u80fd\u5408\u7ea6\u5fc5\u987b\u6709 ",(0,o.kt)("inlineCode",{parentName:"p"},'crat-type=["cdylib"]')," \u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u80fd\u4ece\u5b83\u4eec\u4e2d\u5bfc\u5165\u4efb\u4f55\u4e1c\u897f\u3002"),(0,o.kt)("p",null,"\u89e3\u51b3\u65b9\u6848\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\uff08\u63a8\u8350\uff09\u521b\u5efa\u4e00\u4e2a\u5e26\u6709 IO \u7ed3\u6784\u7684 sub-crate \u5e93\uff0c\u5e76\u5c06\u5176\u5bfc\u5165\u5230 ",(0,o.kt)("inlineCode",{parentName:"li"},"Cargo.toml"),"\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u6784\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5728\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u91cd\u65b0\u5b9a\u4e49\u76f8\u540c\u7684\u7ed3\u6784\uff08\u590d\u5236-\u7c98\u8d34\uff09\uff0c\u56e0\u4e3a\u6709\u4e86 codec\uff0c\u5b83\u4eec\u5c06\u751f\u6210\u76f8\u540c\u7684\u5b57\u8282\u3002")),(0,o.kt)("h2",{id:"gtest-\u7684\u80fd\u529b"},(0,o.kt)("inlineCode",{parentName:"h2"},"gtest")," \u7684\u80fd\u529b"),(0,o.kt)("p",null,"\u4e3a ",(0,o.kt)("a",{parentName:"p",href:"/zh-cn/examples/ping"},"PING-PONG")," \u7a0b\u5e8f\u63d0\u4f9b\u7684\u4f8b\u5b50\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use gtest::{Log, Program, System};\n\n#[test]\nfn basics() {\n    // Initialization of the common environment for running smart contacts.\n    //\n    // This emulates node\'s and chain behavior.\n    //\n    // By default, sets:\n    // - current block equals 0\n    // - current timestamp equals UNIX timestamp of your system.\n    // - minimal message id equal 0x010000..\n    // - minimal program id equal 0x010000..\n    let sys = System::new();\n\n    // You may control time in the system by spending blocks.\n    //\n    // It adds the amount of blocks passed as argument to the current block of the system.\n    // Same for the timestamp. Note, that for now 1 block in Gear network is 1 sec duration.\n    sys.spend_blocks(150);\n\n    // Initialization of styled `env_logger` to print logs (only from `gwasm` by default) into stdout.\n    //\n    // To specify printed logs, set the env variable `RUST_LOG`:\n    // `RUST_LOG="target_1=logging_level,target_2=logging_level" cargo test`\n    //\n    // Gear smart contracts use `gwasm` target with `debug` logging level\n    sys.init_logger();\n\n    // Initialization of program structure from file.\n    //\n    // Takes as arguments reference to the related `System` and the path to wasm binary relatively\n    // the root of the crate where the test was written.\n    //\n    // Sets free program id from the related `System` to this program. For this case it equals 0x010000..\n    // Next program initialized without id specification will have id 0x020000.. and so on.\n    let ping_pong = Program::from_file(\n        &sys,\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // We can check the id of the program by calling `id()` function.\n    //\n    // It returns `ProgramId` type value.\n    let ping_pong_id = ping_pong.id();\n\n    // There is also a `from_file_with_id` constructor to manually specify the id of the program.\n    //\n    // Every place in this lib, where you need to specify some ids,\n    // it requires generic type `ID`, which implements `Into<ProgramIdWrapper>`.\n    //\n    // `ProgramIdWrapper` may be built from:\n    // - u64;\n    // - [u8; 32];\n    // - String;\n    // - &str;\n    // - ProgramId (from `gear_core` one\'s, not from `gstd`).\n    //\n    // String implementation means the input as hex (with or without "0x")\n\n    // Numeric\n    let _ = Program::from_file_with_id(\n        &sys,\n        105,\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Hex with "0x"\n    let _ = Program::from_file_with_id(\n        &sys,\n        "0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e",\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Hex without "0x"\n    let _ = Program::from_file_with_id(\n        &sys,\n        "e659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df5e",\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // Array [u8; 32] (e.g. filled with 5)\n    let _ = Program::from_file_with_id(\n        &sys,\n        [5; 32],\n        "./target/wasm32-unknown-unknown/release/demo_ping.wasm",\n    );\n\n    // If you initialize program not in this scope, in cycle, in other conditions,\n    // where you didn\'t save the structure, you may get the object from the system by id.\n    let _ = sys.get_program(105);\n\n    // To send message to the program need to call one of two program\'s functions:\n    // `send()` or `send_bytes()`.\n    //\n    // Both of the methods require sender id as the first argument and the payload as second.\n    //\n    // The difference between them is pretty simple and similar to `gstd` functions\n    // `msg::send()` and `msg::send_bytes()`.\n    //\n    // The first one requires payload to be CODEC Encodable, while the second requires payload\n    // implement `AsRef<[u8]>`, that means to be able to represent as bytes.\n    //\n    // `send()` uses `send_bytes()` under the hood with bytes from payload.encode().\n    //\n    // First message to the initialized program structure is always the init message.\n    let res = ping_pong.send_bytes(100001, "INIT MESSAGE");\n\n    // Any sending functions in the lib returns `RunResult` structure.\n    //\n    // It contains the final result of the processing message and others,\n    // which were created during the execution.\n    //\n    // It has 4 main functions.\n\n    // Returns the reference to the Vec produced to users messages.\n    // You may assert them as you wish, iterating through them.\n    assert!(res.log().is_empty());\n\n    // Returns bool which shows that there was panic during the execution\n    // of the main message.\n    assert!(!res.main_failed());\n\n    // Returns bool which shows that there was panic during the execution\n    // of the created messages during the main execution.\n    //\n    // Equals false if no others were called.\n    assert!(!res.others_failed());\n\n    // Returns bool which shows that logs contains a given log.\n    //\n    // Syntax sugar around `res.log().iter().any(|v| v == arg)`.\n    assert!(!res.contains(&Log::builder()));\n\n    // To build a log for assertion you need to use `Log` structure with it\'s builders.\n    // All fields here are optional.\n    // Assertion with Logs from core are made on the Some(..) fields\n    // You will run into panic if you try to set the already specified field.\n    //\n    // Constructor for success log.\n    let _ = Log::builder();\n\n    // Constructor for error reply log.\n    //\n    // Note that error reply never contains payload.\n    // And it\'s exit code equals 1, instead of 0 for success replies.\n    let _ = Log::error_builder();\n\n    // Let\u2019s send a new message after the program has been initialized.\n    let res = ping_pong.send_bytes(100001, "PING");\n\n    // Other fields are set optionally by `dest()`, `source()`, `payload()`, `payload_bytes()`.\n    //\n    // The logic for `payload()` and `payload_bytes()` is the same as for `send()` and `send_bytes()`.\n    // First requires an encodable struct. The second requires bytes.\n    let log = Log::builder()\n        .source(ping_pong_id)\n        .dest(100001)\n        .payload_bytes("PONG");\n\n    assert!(res.contains(&log));\n\n    let wrong_log = Log::builder().source(100001);\n\n    assert!(!res.contains(&wrong_log));\n\n    // Log also has `From` implementations from (ID, T) and from (ID, ID, T),\n    // where ID: Into<ProgramIdWrapper>, T: AsRef<[u8]>\n    let x = Log::builder().dest(5).payload_bytes("A");\n    let x_from: Log = (5, "A").into();\n\n    assert_eq!(x, x_from);\n\n    let y = Log::builder().dest(5).source(15).payload_bytes("A");\n    let y_from: Log = (15, 5, "A").into();\n\n    assert_eq!(y, y_from);\n\n    assert!(!res.contains(&(ping_pong_id, ping_pong_id, "PONG")));\n    assert!(res.contains(&(1, 100001, "PONG")));\n}\n')))}d.isMDXComponent=!0}}]);