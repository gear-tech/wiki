"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6496],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(t),m=r,g=s["".concat(c,".").concat(m)]||s[m]||d[m]||o;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=s;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},7394:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={sidebar_label:"\u5408\u7ea6\u4ea4\u4e92",sidebar_position:4},c="\u8de8\u5408\u7ea6\u901a\u4fe1",p={unversionedId:"developing-contracts/interactions-between-programs",id:"developing-contracts/interactions-between-programs",title:"\u8de8\u5408\u7ea6\u901a\u4fe1",description:"\u672c\u6587\u89e3\u91ca\u4e86\u51e0\u4e2a\u7a0b\u5e8f\uff08\u667a\u80fd\u5408\u7ea6\uff09\u5982\u4f55\u901a\u8fc7\u53d1\u9001\u6d88\u606f\u8fdb\u884c\u76f8\u4e92\u901a\u4fe1\u3002",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/interactions-between-programs.md",sourceDirName:"developing-contracts",slug:"/developing-contracts/interactions-between-programs",permalink:"/zh-cn/developing-contracts/interactions-between-programs",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/interactions-between-programs.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"\u5408\u7ea6\u4ea4\u4e92",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"\u6d88\u606f\u683c\u5f0f",permalink:"/zh-cn/developing-contracts/messaging"},next:{title:"\u5408\u7ea6\u6d4b\u8bd5",permalink:"/zh-cn/developing-contracts/testing"}},u={},d=[{value:"<code>My Token</code> \u5408\u7ea6",id:"my-token-\u5408\u7ea6",level:3},{value:"<code>Wallet</code> \u5408\u7ea6",id:"wallet-\u5408\u7ea6",level:3}],s={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u8de8\u5408\u7ea6\u901a\u4fe1"},"\u8de8\u5408\u7ea6\u901a\u4fe1"),(0,o.kt)("p",null,"\u672c\u6587\u89e3\u91ca\u4e86\u51e0\u4e2a\u7a0b\u5e8f\uff08\u667a\u80fd\u5408\u7ea6\uff09\u5982\u4f55\u901a\u8fc7\u53d1\u9001\u6d88\u606f\u8fdb\u884c\u76f8\u4e92\u901a\u4fe1\u3002"),(0,o.kt)("p",null,"\u4ee5\u4e24\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u4e3a\u4f8b\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"My Token")," - \u8be5\u5408\u7ea6\u5c06\u6709\u94f8\u9020\u4ee3\u5e01\u7684\u80fd\u529b"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Wallet")," - \u8be5\u5408\u7ea6\u5c06\u5b58\u50a8\u7528\u6237\u62e5\u6709\u591a\u5c11\u4ee3\u5e01\u7684\u4fe1\u606f")),(0,o.kt)("h3",{id:"my-token-\u5408\u7ea6"},(0,o.kt)("inlineCode",{parentName:"h3"},"My Token")," \u5408\u7ea6"),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u5408\u7ea6 ",(0,o.kt)("inlineCode",{parentName:"p"},"My Token"),"\uff0c\u7b2c\u4e00\u6b65\u662f\u5b9a\u4e49\u5408\u7ea6\u7684\u7ed3\u6784\u6765\u5b58\u50a8\u8d26\u6237\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"balances"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Default, Encode, Decode, TypeInfo)]\npub struct MyToken {\n    name: String,\n    symbol: String,\n    balances: BTreeMap<ActorId, u128>,\n}\n")),(0,o.kt)("p",null,"\u6211\u4eec\u4e3a\u5408\u7ea6\u521d\u59cb\u5316 ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," \u548c \u6d88\u606f\u5904\u7406 ",(0,o.kt)("inlineCode",{parentName:"p"},"handle")," \u5b9a\u4e49\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," \u4e24\u79cd\u6d88\u606f\u7c7b\u578b\u3002"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5408\u7ea6\u5c06\u7528\u4ee5\u4e0b\u7ed3\u6784\u521d\u59cb\u5316\uff1a"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct InitConfig {\n    name: String,\n    symbol: String,\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u4f20\u5165\u7684\u6d88\u606f\u5c06\u8c03\u7528\u6b64\u5408\u7ea6\u4ee5\u94f8\u9020\u4ee3\u5e01\u6216\u83b7\u53d6\u5e10\u6237\u4f59\u989d\uff1a"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub enum Action {\n    Mint(u128),\n    BalanceOf(ActorId),\n}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u56de\u53d1\u6d88\u606f\u5c06\u8fd4\u56de\u94f8\u5e01\u6210\u529f\u7684\u7ed3\u679c\u6216\u7528\u6237\u7684\u4f59\u989d\uff1a"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub enum Event {\n    Minted {\n        to: ActorId,\n        amount: u128,\n    },\n    BalanceOf(u128),\n}\n")))),(0,o.kt)("p",null,"\u5fc5\u987b\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata!")," \u4e2d\u5b9a\u4e49\u6d88\u606f\u7c7b\u578b\uff0c\u7528\u4e8e\u4ece Rust \u5bfc\u51fa\u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'gstd::metadata! {\n    title: "MyFungibleToken",\n        init:\n            input: InitConfig,\n        handle:\n            input: Action,\n            output: Event,\n}\n')),(0,o.kt)("p",null,"\u4e0b\u4e00\u6b65\u7f16\u5199\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u529f\u80fd\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'static mut TOKEN: Option<MyToken> = None;\n#[no_mangle]\npub unsafe extern "C" fn init() {\n    let config: InitConfig= msg::load().expect("Unable to decode InitConfig");\n    let token = MyToken {\n        name: config.name,\n        symbol: config.symbol,\n        balances: BTreeMap::new(),\n    };\n    TOKEN = Some(token);\n}\n')),(0,o.kt)("p",null,"\u7136\u540e\u6211\u4eec\u5199\u5bf9\u4f20\u5165\u6d88\u606f\u8fdb\u884c\u5904\u7406\u8fc7\u7a0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\npub unsafe extern "C" fn handle() {\n    let action: Action = msg::load().expect("Could not load Action");\n    let token: &mut MyToken = TOKEN.get_or_insert(MyToken::default());\n    match action {\n        Action::Mint(amount) => {\n            token.mint(amount);\n        }\n        Action::BalanceOf(account)=> {\n            token.balance_of(&account);\n        }\n    }\n}\n')),(0,o.kt)("p",null,"\u6700\u7ec8\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"MyToken")," \u4ee3\u7801\u5b9e\u73b0\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyToken {\n    fn mint(&mut self, amount: u128) {\n        *self.balances.entry(msg::source()).or_insert(0) += amount;\n        msg::reply(\n            Event::Minted {\n                to: msg::source(),\n                amount\n            },\n            exec::gas_available() - GAS_RESERVE,\n            0,\n        )\n        .unwrap();\n    }\n    fn balance_of(&mut self, account: &ActorId) {\n        let balance = self.balances.get(account).unwrap_or(&0);\n        msg::reply(\n            Event::Balance(*balance),\n            exec::gas_available() - GAS_RESERVE,\n            0,\n        )\n        .unwrap();\n    }\n}\n")),(0,o.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"msg::source()")," \u6765\u6807\u8bc6\u53d1\u9001\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u6d88\u606f\u7684\u5e10\u6237\u3002"),(0,o.kt)("h3",{id:"wallet-\u5408\u7ea6"},(0,o.kt)("inlineCode",{parentName:"h3"},"Wallet")," \u5408\u7ea6"),(0,o.kt)("p",null,"\u7b2c\u4e8c\u4e2a\u5408\u7ea6\u975e\u5e38\u7b80\u5355\uff1a\u5b83\u4f1a\u6536\u5230\u6d88\u606f ",(0,o.kt)("inlineCode",{parentName:"p"},"AddBalance"),"\uff0c\u5e76\u56de\u590d ",(0,o.kt)("inlineCode",{parentName:"p"},"BalanceAdded"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct AddBalance {\n    account: ActorId,\n    token_id: ActorId,\n}\n#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct BalanceAdded {\n   account: ActorId,\n   token_id: ActorId,\n   amount: u128,\n}\ngstd::metadata! {\n    title: "Wallet",\n        handle:\n            input: AddBalance,\n            output: BalanceAdded,\n}\n')),(0,o.kt)("p",null,"\u7531\u4e8e\u4e00\u4e2a\u8d26\u6237\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u540c\u8d28\u5316\u4ee3\u5e01\uff0c\u5408\u540c\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5b58\u50a8\u7528\u6237\u53ca\u5176\u4f59\u989d\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'static mut WALLET: BTreeMap<ActorId, BTreeMap<ActorId,u128>> = BTreeMap::new();\n\n#[no_mangle]\npub unsafe extern "C" fn init() {}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Wallet")," \u5408\u7ea6\u5411 ",(0,o.kt)("inlineCode",{parentName:"p"},"MyToken")," \u5408\u7ea6\u53d1\u9001\u8bf7\u6c42\u7528\u6237\u4f59\u989d\u7684\u6d88\u606f\u3002\u4ee3\u5e01\u5408\u7ea6\u7684\u5730\u5740\u663e\u793a\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"AddBalance")," \u4e2d\u3002"),(0,o.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5f02\u6b65\u6d88\u606f\u4f20\u9012\u51fd\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"send_and_wait_for_reply"),"\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"#[gstd::async_main]")," \u5b8f\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[gstd::async_main]\nasync fn main() {\n    let msg: AddBalance = msg::load().expect("Failed to decode `AddBalance`");\n    let reply: Event = msg::send_and_wait_for_reply(\n        msg.token_id,\n        Action::BalanceOf(msg.account),\n        GAS_RESERVE,\n        0,\n    )\n    .unwrap()\n    .await\n    .expect("Function call error");\n    if let Event::Balance(amount) = reply{\n        WALLET.entry(msg.account)\n                .and_modify(|id| *id.entry(msg.token_id).or_insert(0) += amount)\n                .or_insert_with(|| {\n                        let mut a = BTreeMap::new();\n                        a.insert(msg.token_id, amount);\n                        a\n                    }\n                );\n        msg::reply(\n            BalanceAdded {\n                account: msg.account,\n                token_id: msg.token_id,\n                amount,\n            },\n            exec::gas_available() - GAS_RESERVE,\n            0,\n        )\n        .unwrap();\n    }\n}\n')))}m.isMDXComponent=!0}}]);