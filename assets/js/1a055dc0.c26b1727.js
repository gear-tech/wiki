"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7532],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),o=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=o(n),d=a,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?i.createElement(k,l(l({ref:t},p),{},{components:n})):i.createElement(k,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var o=2;o<r;o++)l[o]=n[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2118:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return o},toc:function(){return m}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],u={sidebar_label:"Supply chain",sidebar_position:10},s="Supply chain",o={unversionedId:"examples/supply-chain",id:"examples/supply-chain",title:"Supply chain",description:"Introduction",source:"@site/docs/examples/supply-chain.md",sourceDirName:"examples",slug:"/examples/supply-chain",permalink:"/examples/supply-chain",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/supply-chain.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Supply chain",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Dutch Auction",permalink:"/examples/dutch-auction"},next:{title:"Multisig Wallet",permalink:"/examples/multisig-wallet"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"What is a supply chain?",id:"what-is-a-supply-chain",level:3},{value:"Supply chain application example by Gear",id:"supply-chain-application-example-by-gear",level:3},{value:"Logic",id:"logic",level:2},{value:"Interface",id:"interface",level:2},{value:"Initialization config",id:"initialization-config",level:3},{value:"Functions",id:"functions",level:3},{value:"Actions &amp; events",id:"actions--events",level:3},{value:"Source code",id:"source-code",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supply-chain"},"Supply chain"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("h3",{id:"what-is-a-supply-chain"},"What is a supply chain?"),(0,r.kt)("p",null,"In logistics, a supply chain is a system for tracking and delivering to an end consumer various items. As a rule, such systems can't work without a lot of paperwork and other layers of bureaucracy. All of this costs a lot of time and money and increases the likelihood of an accidental error or, worst of all, a fraud. With the help of smart contract and blockchain technologies, it is possible to eliminate these problems by making a supply chain more efficient, reliable and transparent."),(0,r.kt)("h3",{id:"supply-chain-application-example-by-gear"},"Supply chain application example by Gear"),(0,r.kt)("p",null,"Anyone can create their own supply chain contract and application and run it on the Gear Network. To do this, Gear created an example which is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/supply-chain"},"GitHub"),". "),(0,r.kt)("p",null,"This article explains the programming interface, data structure, basic functions and explains their purpose. It can be used as is or modified to suit your own scenarios."),(0,r.kt)("h2",{id:"logic"},"Logic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each newly produced item gets the NFT (in Gear's context - ",(0,r.kt)("a",{parentName:"li",href:"/examples/gnft-721"},"Gear non-fungible tokens (gNFT)")," and an ID equal to the ID of its NFT. Then, as an item moves along a supply chain, an item's NFT transfers between a supply chain program, item's producer, and future distributor, retailer and end consumer."),(0,r.kt)("li",{parentName:"ul"},"Anyone who knows an item's ID can get item info."),(0,r.kt)("li",{parentName:"ul"},"Sale, purchase, delivery is made in ",(0,r.kt)("a",{parentName:"li",href:"/examples/gft-20"},"Gear fungible tokens (gFT)"),".")),(0,r.kt)("p",null,"Item info has the following struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct ItemInfo {\n    name: String,\n    notes: String,\n    producer: ActorId,\n    distributor: ActorId,\n    retailer: ActorId,\n    state: ItemState,\n}\n")),(0,r.kt)("p",null,"And ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemState")," has the following enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum ItemState {\n    Produced,\n    ForSaleByProducer,\n    PurchasedByDistributor,\n    ShippedByProducer,\n    ReceivedByDistributor,\n    ProcessedByDistributor,\n    PackagedByDistributor,\n    ForSaleByDistributor,\n    PurchasedByRetailer,\n    ShippedByDistributor,\n    ReceivedByRetailer,\n    ForSaleByRetailer,\n    PurchasedByConsumer,\n}\n")),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("h3",{id:"initialization-config"},"Initialization config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct InitSupplyChain {\n    producers: BTreeSet<ActorId>,\n    distributors: BTreeSet<ActorId>,\n    retailers: BTreeSet<ActorId>,\n\n    ft_program_id: ActorId,\n    nft_program_id: ActorId,\n}\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn produce_item(&mut self, name: String, notes: String)\n")),(0,r.kt)("p",null,"Produces one item with a name and notes and replies with its ID.\nTransfers created NFT for an item to a producer."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a producer in a supply chain.")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": an item's name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notes"),": an item's notes.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn put_up_for_sale_by_producer(&mut self, item_id: U256, price: u128)\n")),(0,r.kt)("p",null,"Puts an item up for a sale to a distributor for a given price\non behalf of a producer.\nTransfers item's NFT to a supply chain."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a producer in a supply chain\nand a producer of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"Produced"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"price"),": an item's price.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn purchase_by_distributor(&mut self, item_id: U256, delivery_time: u64)\n")),(0,r.kt)("p",null,"Purchases an item from a producer on behalf of a distributor.\nTransfers tokens for purchasing an item to a supply chain\nuntil an item is received (by the ",(0,r.kt)("inlineCode",{parentName:"p"},"receive_by_distributor")," function)."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ForSaleByProducer"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delivery_time"),": a time in seconds for which a producer must deliver an item.\nA countdown starts after the ",(0,r.kt)("inlineCode",{parentName:"li"},"ship_by_producer")," function is executed.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn ship_by_producer(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Starts shipping a purchased item to a distributor on behalf of a producer.\nStarts a countdown for a delivery time specified in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"purchase_by_distributor")," function."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a producer in a supply chain\nand a producer of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"PurchasedByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn receive_by_distributor(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Receives a shipped item from a producer on behalf of a distributor.\nDepending on a counted delivery time, transfers tokens for purchasing an item\nfrom a supply chain to a producer or as a penalty for being late refunds some or\nall of them to a distributor.\nTransfers item's NFT to a distributor."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain\nand a distributor of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ShippedByProducer"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn process_by_distributor(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Processes a received item from a producer on behalf of a distributor."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain\nand a distributor of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ReceivedByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn package_by_distributor(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Packages a processed item on behalf of a distributor."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain\nand a distributor of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ProcessedByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn put_up_for_sale_by_distributor(&mut self, item_id: U256, price: u128)\n")),(0,r.kt)("p",null,"Puts a packaged item up for a sale to a retailer\nfor a given price on behalf of a distributor.\nTransfers item's NFT to a supply chain."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain\nand a distributor of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"PackagedByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"price"),": an item's price.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn purchase_by_retailer(&mut self, item_id: U256, delivery_time: u64)\n")),(0,r.kt)("p",null,"Purchases an item from a distributor on behalf of a retailer.\nTransfers tokens for purchasing an item to a supply chain\nuntil an item is received (by the ",(0,r.kt)("inlineCode",{parentName:"p"},"receive_by_retailer")," function)."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a retailer in a supply chain."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ForSaleByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delivery_time"),": a time in seconds for which a distributor must deliver an item.\nA countdown starts after the ",(0,r.kt)("inlineCode",{parentName:"li"},"ship_by_distributor")," function is executed.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn ship_by_distributor(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Starts shipping a purchased item to a retailer on behalf of a distributor.\nStarts a countdown for a delivery time specified in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"purchase_by_retailer")," function."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a distributor in a supply chain\nand a distributor of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"PurchasedByRetailer"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn receive_by_retailer(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Receives a shipped item from a distributor on behalf of a retailer.\nDepending on a counted delivery time, transfers tokens for purchasing an item\nfrom a supply chain to a distributor or as a penalty for being late refunds some or\nall of them to a retailer.\nTransfers item's NFT to a retailer."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a retailer in a supply chain\nand a retailer of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ShippedByDistributor"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn put_up_for_sale_by_retailer(&mut self, item_id: U256, price: u128)\n")),(0,r.kt)("p",null,"Puts a received item from a distributor up for a sale to a consumer\nfor a given price on behalf of a retailer.\nTransfers item's NFT to a supply chain."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"msg::source()")," must be a retailer in a supply chain\nand a retailer of this item."),(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ReceivedByRetailer"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"price"),": an item's price.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn purchase_by_consumer(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Purchases an item from a retailer.\nTransfers tokens for purchasing an item to its retailer.\nTransfers item's NFT to a consumer."),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Item's ",(0,r.kt)("inlineCode",{parentName:"li"},"ItemState")," must be ",(0,r.kt)("inlineCode",{parentName:"li"},"ForSaleByRetailer"),".")),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn get_item_info(&mut self, item_id: U256)\n")),(0,r.kt)("p",null,"Gets item info."),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"item_id"),": an item's ID.")),(0,r.kt)("h3",{id:"actions--events"},"Actions & events"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Action")," is an enum that is sent to a program and contains info about what it should do. After a successful processing of ",(0,r.kt)("strong",{parentName:"p"},"Action"),", a program replies with the ",(0,r.kt)("strong",{parentName:"p"},"Event")," enum that contains info about a processed ",(0,r.kt)("strong",{parentName:"p"},"Action")," and its result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum SupplyChainAction {\n    Produce { name: String, notes: String },\n    PutUpForSaleByProducer { item_id: U256, price: u128 },\n    PurchaseByDistributor { item_id: U256, delivery_time: u64 },\n    ShipByProducer(U256),\n    ReceiveByDistributor(U256),\n    ProcessByDistributor(U256),\n    PackageByDistributor(U256),\n    PutUpForSaleByDistributor { item_id: U256, price: u128 },\n    PurchaseByRetailer { item_id: U256, delivery_time: u64 },\n    ShipByDistributor(U256),\n    ReceiveByRetailer(U256),\n    PutUpForSaleByRetailer { item_id: U256, price: u128 },\n    PurchaseByConsumer(U256),\n    GetItemInfo(U256),\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum SupplyChainEvent {\n    Produced(U256),\n    ForSaleByProducer(U256),\n    PurchasedByDistributor {\n        from: ActorId,\n        item_id: U256,\n        price: u128,\n    },\n    ShippedByProducer(U256),\n    ReceivedByDistributor {\n        from: ActorId,\n        item_id: U256,\n    },\n    ProcessedByDistributor(U256),\n    PackagedByDistributor(U256),\n    ForSaleByDistributor {\n        item_id: U256,\n        price: u128,\n    },\n    PurchasedByRetailer {\n        from: ActorId,\n        item_id: U256,\n        price: u128,\n    },\n    ShippedByDistributor(U256),\n    ReceivedByRetailer {\n        item_id: U256,\n        from: ActorId,\n    },\n    ForSaleByRetailer {\n        item_id: U256,\n        price: u128,\n    },\n    PurchasedByConsumer {\n        from: ActorId,\n        item_id: U256,\n        price: u128,\n    },\n    ItemInfo {\n        item_id: U256,\n        info: ItemInfo,\n    },\n}\n")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null,"The source code of this example of a supply chain smart contract and the example of an implementation of its testing is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/supply-chain"},"GitHub"),"."),(0,r.kt)("p",null,"The source code of this example of a supply chain smart contract and the example of an implementation of its testing is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/supply-chain"},"GitHub"),"."),(0,r.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/developing-contracts/testing"},"Program Testing")," article."))}d.isMDXComponent=!0}}]);