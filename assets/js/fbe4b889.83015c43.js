"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3129],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7195:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],i={sidebar_position:6,sidebar_label:"Send Message"},p="Send Message",l={unversionedId:"api/send-message",id:"api/send-message",title:"Send Message",description:"This example shows how to send messages to the program:",source:"@site/docs/api/send-message.mdx",sourceDirName:"api",slug:"/api/send-message",permalink:"/api/send-message",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/send-message.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_label:"Send Message"},sidebar:"tutorialSidebar",previous:{title:"Submit Code",permalink:"/api/submit-code"},next:{title:"Read State",permalink:"/api/read-state"}},c={},m=[{value:"Send reply message",id:"send-reply-message",level:3}],u={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"send-message"},"Send Message"),(0,o.kt)("p",null,"This example shows how to send messages to the program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const message = {\n    destination: destination, // programId\n    payload: somePayload,\n    gasLimit: 100_000_000,\n    value: 1000,\n  };\n  // By default, the payload will be encoded using meta.handle_input type\n  const submitted = await gearApi.message.submit(message, meta);\n\n  // If you need to specify a different handler\n  // For example \n  await gearApi.message.submit(message, meta, meta.async_handle_input); \n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await gearApi.message.signAndSend(keyring, (event) => {\n    console.log(event.toHuman());\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"In real conditions to ensure successful message processing, the calculation of the required gas for processing the message should be performed by using ",(0,o.kt)("inlineCode",{parentName:"p"},"api.program.calculateGas")," method."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/api/calculate-gas"},"more info"))),(0,o.kt)("h3",{id:"send-reply-message"},"Send reply message"),(0,o.kt)("p",null,"When you need to reply to a message received from a program, use this example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const reply = {\n    replyToId: messageId,\n    payload: somePayload,\n    gasLimit: 10000000,\n    value: 1000,\n  };\n  // In that case, the payload will be encoded using meta.async_handle_input type if it exists, if not it will be used meta.async_init_input\n\n  const submitted = await gearApi.reply.submit(reply, meta);\n\n  // If you need to specify a handler mannualy\n  // For example \n  await gearApi.reply.submit(reply, meta, meta.async_init_input);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await gearApi.reply.signAndSend(keyring, (events) => {\n    console.log(event.toHuman());\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")))}d.isMDXComponent=!0}}]);