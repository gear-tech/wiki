"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3550],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2654:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Crowdsale(ICO)",sidebar_position:18},l="Crowdsale (ICO)",c={unversionedId:"examples/crowdsale-ico",id:"examples/crowdsale-ico",title:"Crowdsale (ICO)",description:"Introduction",source:"@site/docs/examples/crowdsale-ico.md",sourceDirName:"examples",slug:"/examples/crowdsale-ico",permalink:"/examples/crowdsale-ico",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/crowdsale-ico.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_label:"Crowdsale(ICO)",sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"OnChain NFT",permalink:"/examples/onchain-nft"},next:{title:"Getting started",permalink:"/api/getting-started"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Interface",id:"interface",level:2},{value:"Source files",id:"source-files",level:3},{value:"Structs",id:"structs",level:3},{value:"Functions",id:"functions",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"crowdsale-ico"},"Crowdsale (ICO)"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"A public offering to invest in a brand-new cryptocurrency or other digital asset is known as a cryptocurrency Crowdsale. An initial coin offering (ICO) can be used by new projects to raise money for development and other purposes. ICO is a time-limited campaign where investors can exchange their cryptocurrencies defined in the campaign to newly proposed tokens. The new tokens are promoted as future functional units after the ICO's funding goal is met and the project launches."),(0,o.kt)("p",null,"An example of an ICO smart-contract implementation described in this article is one of many other decentralized applications that can be implemented and laucnhed on Gear. This article explains the programming interface, data structure, basic functions and explains their purpose. It can be used as is or modified to suit your own scenarios. Anyone can easily create their own Crowdsale ICO application and run it on the Gear Network."),(0,o.kt)("p",null,"Initial funds with which a token is purchased are determined by the Gear fungible tokens contract - ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/examples/gft-20"},"gFT"),". The contract's source code is available on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/crowdsale-ico"},"GitHub"),"."),(0,o.kt)("h2",{id:"interface"},"Interface"),(0,o.kt)("h3",{id:"source-files"},"Source files"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"messages.rs")," - contains function of the fungible token contract. Crowdsale contract interacts with fungible token contract through transfer_tokens function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub async fn transfer_tokens(\n    token_id: &ActorId, // - the fungible token contract address\n    from: &ActorId, // - the sender address\n    to: &ActorId, // - the recipient address\n    amount: u128, // - the amount of tokens\n) \n")),(0,o.kt)("p",null,"This function sends a message (the action is defined in the enum IcoAction) and gets a reply (the reply is defined in the enum IcoEvent):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let _transfer_response = msg::send_for_reply(\n    *token_id,\n    FTAction::Transfer {\n        from: *from,\n        to: *to,\n        amount,\n    },\n    0,\n)\n.expect("Error in message")\n.await\n.expect("Error in transfer");\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"asserts.rs")," - contains asserts functions: ",(0,o.kt)("inlineCode",{parentName:"li"},"owner_message")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"not_zero_address"),". ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner_message")," checks if ",(0,o.kt)("inlineCode",{parentName:"li"},"msg::source()")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"owner"),". Otherwise, it panics:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn owner_message(owner: &ActorId, message: &str) {\n    if msg::source() != *owner {\n        panic!("{}: Not owner message", message)\n    }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"not_zero_address")," checks if ",(0,o.kt)("inlineCode",{parentName:"li"},"address")," is not equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"ZERO_ID"),". Otherwise, it panics:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn not_zero_address(address: &ActorId, message: &str) {\n    if address == &ZERO_ID {\n        panic!("{}: Zero address", message)\n    }\n}\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"lib.rs")," - defines the contract logic.")),(0,o.kt)("h3",{id:"structs"},"Structs"),(0,o.kt)("p",null,"The contract has the following structs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"struct IcoContract {\n    ico_state: IcoState,\n    start_price: u128,\n    price_increase_step: u128,\n    time_increase_step: u128,\n    tokens_sold: u128,\n    tokens_goal: u128,\n    owner: ActorId,\n    token_address: ActorId,\n    token_holders: BTreeMap<ActorId, u128>,\n}\n")),(0,o.kt)("p",null,"where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ico_state")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"IcoState")," struct which consists of:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct IcoState {\n    pub ico_started: bool, // true if ICO was started\n    pub start_time: u64, // time when ICO was started, otherwise is zero\n    pub duration: u64, // duration of the ICO, otherwise is zero\n    pub ico_ended: bool, // true if ICO was ended\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"start_price")," - initial price of tokens"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"price_increase_step")," - how much does the price increase"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"time_increase_step")," - the period of time after which the price increases"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tokens_sold")," - how many tokens were sold"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tokens_goal")," - how many tokens are we going to sell"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"owner")," - contract owner"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token_address")," - fungible token address "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token_holders")," - the list of buyers and the number of tokens they bought")),(0,o.kt)("h3",{id:"functions"},"Functions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Starts the ICO. Only owner can call it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn start_ico(&mut self, config: IcoAction)\n")),(0,o.kt)("p",null,"replies with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"IcoEvent::SaleStarted {\n    duration,\n    start_price,\n    tokens_goal,\n    price_increase_step,\n    time_increase_step,\n},\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Purchase of tokens. Anyone with enough balance can call and buy tokens:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn buy_tokens(&mut self, tokens_cnt: u128)\n")),(0,o.kt)("p",null,"replies with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"IcoEvent::Bought {\n    buyer,\n    amount,\n    change,\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ends the ICO. Only owner can call it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn end_sale(&mut self)\n")),(0,o.kt)("p",null,"replies with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"IcoEvent::SaleEnded\n")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"The source code of this example of ICO smart contract and the example of an implementation of its testing is available on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/crowdsale-ico"},"Github"),"."),(0,o.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/developing-contracts/testing"},"Program Testing")," article."))}m.isMDXComponent=!0}}]);