"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9375],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6225:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"NFT Marketplace",sidebar_position:14},c="NFT Marketplace",l={unversionedId:"examples/marketplace",id:"examples/marketplace",title:"NFT Marketplace",description:"Introduction",source:"@site/docs/examples/marketplace.md",sourceDirName:"examples",slug:"/examples/marketplace",permalink:"/zh-cn/examples/marketplace",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/marketplace.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_label:"NFT Marketplace",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Concert (FT \u8f6c\u4e3a NFT)",permalink:"/zh-cn/examples/concert"},next:{title:"RMRK NFT standard",permalink:"/zh-cn/examples/rmrk"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Logic",id:"logic",level:2},{value:"Listing NFTs, changing the price or stopping the sale.",id:"listing-nfts-changing-the-price-or-stopping-the-sale",level:3},{value:"NFT purchase.",id:"nft-purchase",level:3},{value:"NFT auction.",id:"nft-auction",level:3},{value:"Offers.",id:"offers",level:3},{value:"User interface",id:"user-interface",level:2},{value:"Configure basic dApp in .env:",id:"configure-basic-dapp-in-env",level:3},{value:"Simple NFT",id:"simple-nft",level:3},{value:"How to run",id:"how-to-run",level:3},{value:"Source code",id:"source-code",level:2}],d={toc:u};function h(e){var t=e.components,s=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nft-marketplace"},"NFT Marketplace"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"NFT marketplace is a contract where you can buy and sell non-fungible tokens for fungible tokens. The contract also supports holding the NFT auctions and making/accepting purchase offers on NFTs."),(0,i.kt)("p",null,"A smart contract examples created by Gear are available on GitHub so anyone can easily create their own NFT marketplace application and run it on the Gear Network:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/gear-dapps/non-fungible-token/tree/master/nft"},"Gear Non-Fungible Token"),". "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/gear-dapps/non-fungible-token/tree/master/nft-marketplace"},"NFT marketplace"),".")),(0,i.kt)("p",null,"This article explains the programming interface, data structure, basic functions and explains their purpose. It can be used as is or modified to suit your own scenarios."),(0,i.kt)("p",null,"Gear also ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/marketplace"},"provides")," an example implementation of the ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.gear-tech.io/"},"NFT Marketplace's")," user interface to demonstrate its interaction with smart contracts in the Gear Network."),(0,i.kt)("p",null," You can watch a video on how to get the NFT Marketplace application up and running and its capabilities here: ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://youtu.be/RdlWUkxlmV4"},"https://youtu.be/RdlWUkxlmV4")),"."),(0,i.kt)("h2",{id:"logic"},"Logic"),(0,i.kt)("p",null,"The contract state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Market {\n    pub admin_id: ActorId,\n    pub treasury_id: ActorId,\n    pub treasury_fee: u128,\n    pub items: BTreeMap<ContractAndTokenId, Item>,\n    pub approved_nft_contracts: BTreeSet<ActorId>,\n    pub approved_ft_contracts: BTreeSet<ActorId>,\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"admin_id")," - an account who has the right to approve non-fungible-token and fungible-tokens contracts that can be used in the marketplace contract;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"treasury_id")," - an account to which sales commission will be credited;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"treasury_fee")," -\ncommission percentage (from 1 to 5 percent)\nThe marketplace contract is initialized with the following fields;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," - listed NFTs;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"approved_nft_contracts")," - nft contracts accounts that can be listed on the marketplace;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"approved_ft_contracts")," -\nfungible token accounts for which it is possible to buy marketplace items;")),(0,i.kt)("p",null,"The marketplace item has the following struct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Item {\n    pub owner_id: ActorId,\n    pub ft_contract_id: Option<ActorId>,\n    pub price: Option<u128>,\n    pub auction: Option<Auction>,\n    pub offers: Vec<Offer>,\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"owner_id")," - an item owner;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ft_contract_id")," - a contract of fungible tokens for which that item can be bought. If that field is ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," then the item is on sale for native Gear value;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"price")," -\nthe item price. ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," field means that the item is not on the sale;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auction")," -\na field containing information on the current auction. ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," field means that there is no current auction on the item;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"offers")," -\npurchase offers made on that item;")),(0,i.kt)("h3",{id:"listing-nfts-changing-the-price-or-stopping-the-sale"},"Listing NFTs, changing the price or stopping the sale."),(0,i.kt)("p",null,"To list NFT on the marketplace or modify the terms of sale send the following message: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds data on market item.\n/// If the item of that NFT does not exist on the marketplace then it will be listed.\n/// If the item exists then that action is used to change the price or suspend the sale.\n///\n/// # Requirements\n/// * [`msg::source()`](gstd::msg::source) must be the NFT owner\n/// * `nft_contract_id` must be added to `approved_nft_contracts`\n/// * if item already exists, then it cannot be changed if there is an active auction\n///\n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `token_id`: the NFT id\n/// * `price`: the NFT price (if it is `None` then the item is not on the sale)\n///\n/// /// On success replies [`MarketEvent::MarketDataAdded`].\nAddMarketData {\n    nft_contract_id: ActorId,\n    ft_contract_id: Option<ActorId>,\n    token_id: U256,\n    price: Option<u128>,\n}\n")),(0,i.kt)("h3",{id:"nft-purchase"},"NFT purchase."),(0,i.kt)("p",null,"To buy NFT send the following message: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Sells the NFT.\n/// \n/// # Requirements:\n/// * The NFT item must exist and be on sale.\n/// * If the NFT is sold for a native Gear value, then a buyer must attach a value equal to the price.\n/// * If the NFT is sold for fungible tokens then a buyer must have enough tokens in the fungible token contract.\n/// * There must be no open auction on the item.\n/// \n/// Arguments:\n/// * `nft_contract_id`: NFT contract address\n/// * `token_id`: the token ID\n/// \n/// On success replies [`MarketEvent::ItemSold`].\nBuyItem {\n    nft_contract_id: ActorId,\n    token_id: U256,\n}\n")),(0,i.kt)("h3",{id:"nft-auction"},"NFT auction."),(0,i.kt)("p",null,"The marketplace contract includes the ",(0,i.kt)("em",{parentName:"p"},"English auction"),". ",(0,i.kt)("em",{parentName:"p"},"English auction")," is an open auction at an increasing price, where participants openly bid against each other, with each subsequent bid being greater than the previous one."),(0,i.kt)("p",null,"The auction has the following struct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Auction {\n    pub bid_period: u64,\n    pub started_at: u64,\n    pub ended_at: u64,\n    pub current_price: u128,\n    pub current_winner: ActorId,\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bid_period")," - the time interval. If the auction ends before ",(0,i.kt)("inlineCode",{parentName:"li"},"exec::blocktimestamp() + bid_period")," then the auction end time is delayed for ",(0,i.kt)("inlineCode",{parentName:"li"},"bid_period"),";"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"started_at")," - auction start time;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ended_at")," - auction end time;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"current_price")," - the current offered price for the NFT;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"current_winner")," - the current auction winner")),(0,i.kt)("p",null,"The auction is started with the following message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Creates an auction for selected item.\n/// If the NFT item doesn't exist on the marketplace then it will be listed\n///\n/// Requirements:\n/// * Only the item owner can start the auction.\n/// * `nft_contract_id` must be in the list of `approved_nft_contracts`\n/// *  There must be no active auction.\n///\n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `ft_contract_id`: the fungible token contract address that can be used for trading\n/// * `token_id`: the NFT id\n/// * `min_price`: the starting price\n/// * `bid_period`: the time interval. If the auction ends before `exec::blocktimestamp() + bid_period`\n/// then the auction end time is delayed for `bid_period`.\n/// \n/// On success replies [`MarketEvent::AuctionCreated`].\nCreateAuction {\n    nft_contract_id: ActorId,\n    ft_contract_id: Option<ActorId>,\n    token_id: U256,\n    min_price: u128,\n    bid_period: u64,\n    duration: u64,\n},\n")),(0,i.kt)("p",null,"To add bid to the current auction send the following message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds a bid to an ongoing auction.\n/// \n/// # Requirements:\n/// * The item must exist.\n/// * The auction must exist on the item.\n/// * If the NFT is sold for a native Gear value, then a buyer must attach a value equal to the price indicated in the arguments.\n/// * If the NFT is sold for fungible tokens then a buyer must have   enough tokens in the fungible token contract.\n/// * `price` must be greater than the current offered price for that item.\n/// \n/// # Arguments\n/// * `nft_contract_id`: the NFT contract address.\n/// * `token_id`: the NFT id.\n/// * `price`: the offered price.\n///  \n/// On success replies [`MarketEvent::BidAdded`].\nAddBid {\n    nft_contract_id: ActorId,\n    token_id: U256,\n    price: u128,\n},\n")),(0,i.kt)("p",null,"If auction period is over then anyone can send message ",(0,i.kt)("inlineCode",{parentName:"p"},"SettleAuction")," that will send the NFT to the winner and pay to the owner:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Settles the auction.\n/// \n/// Requirements:\n/// * The auction must be over.\n/// \n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `token_id`: the NFT id\n///   \n/// On successful auction replies [`MarketEvent::AuctionSettled`].\n/// If no bids were made replies [`MarketEvent::AuctionCancelled`].\nSettleAuction {\n    nft_contract_id: ActorId,\n    token_id: U256,\n}\n")),(0,i.kt)("h3",{id:"offers"},"Offers."),(0,i.kt)("p",null,"To make offer on the marketplace item send the following message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds a price offer to the item.\n/// \n/// Requirements:\n/// * NFT item must exists and be listed on the marketplace.\n/// * There must be no ongoing auction on the item.\n/// * If a user makes an offer in native Gear value, then he must attach a value equal to the price indicated in the arguments.\n/// * If a user makes an offer in fungible tokens then he must have  enough tokens in the fungible token contract.\n/// * The price can not be equal to 0.\n/// * There must be no identical offers on the item.\n/// \n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `ft_contract_id`: the FT contract address\n/// * `token_id`: the NFT id\n/// * `price`: the offer price\n///     \n/// On success replies [`MarketEvent::OfferAdded`].\nAddOffer {\n    nft_contract_id: ActorId,\n    ft_contract_id: Option<ActorId>,\n    token_id: U256,\n    price: u128,\n},\n")),(0,i.kt)("p",null,"The item owner can accept the offer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Accepts an offer.\n/// \n/// Requirements:\n/// * NFT item must exist and be listed on the marketplace.\n/// * Only the owner can accept the offer.\n/// * There must be no ongoing auction.\n/// * The offer with indicated hash must exist.\n/// \n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `token_id`: the NFT id\n/// * `offer_hash`: the offer hash that includes the offer price and the address of fungible token contract.\n///      \n/// On success replies [`MarketEvent::OfferAccepted`].\nAcceptOffer {\n    nft_contract_id: ActorId,\n    token_id: U256,\n    offer_hash: H256,\n}\n")),(0,i.kt)("p",null,"The user who made the offer can also withdraw his tokens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// Withdraws tokens.\n/// \n/// Requirements:\n/// * NFT item must exist and be listed on the marketplace.\n/// * Only the offer creator can withdraw his tokens.\n/// * The offer with indicated hash must exist.\n/// \n/// Arguments:\n/// * `nft_contract_id`: the NFT contract address\n/// * `token_id`: the NFT id\n/// * `offer_hash`: the offer hash that includes the offer price and the address of fungible token contract.\n/// \n/// On success replies [`MarketEvent::TokensWithdrawn`].\nWithdraw {\n    nft_contract_id: ActorId,\n    token_id: U256,\n    hash: H256,\n},\n")),(0,i.kt)("h2",{id:"user-interface"},"User interface"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.gear-tech.io/"},"Ready-to-Use application")," example provides a user interface that interacts with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/non-fungible-token/tree/master/nft"},"gNFT")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/non-fungible-token/tree/master/nft-marketplace"},"Marketplace")," smart contracts running in Gear Network."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Gear Non-Fundible Token contract enables creation of NFT tokens, proves an ownership of a digital assets, check ",(0,i.kt)("a",{parentName:"li",href:"https://wiki.gear-tech.io/examples/gnft-721"},"this article")," for details."),(0,i.kt)("li",{parentName:"ul"},"NFT Marketplace contract enables to buy and sell non-fungible tokens for fungible tokens, hold the NFT auctions and make/accept purchase offers on NFTs.")),(0,i.kt)("p",null,"This video demonstrates how to configure and run Markeplace applciation on your own and explains the user interaction workflow: ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://youtu.be/RdlWUkxlmV4"},"https://youtu.be/RdlWUkxlmV4"))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img alt",src:n(2080).Z,width:"3427",height:"1737"})),(0,i.kt)("p",null,"An NFT Marketplace application source code is available on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/marketplace"},"GitHub"),"."),(0,i.kt)("h3",{id:"configure-basic-dapp-in-env"},"Configure basic dApp in .env:"),(0,i.kt)("p",null,"For proper application functioning, one needs to adjust an environment variable parameters. An example is available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/blob/master/apps/marketplace/.env.example"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\nREACT_APP_NODE_ADDRESS\nREACT_APP_IPFS_ADDRESS\nREACT_APP_IPFS_GATEWAY_ADDRESS\nREACT_APP_NFT_CONTRACT_ADDRESS\nREACT_APP_MARKETPLACE_CONTRACT_ADDRESS\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REACT_APP_NETWORK")," is Gear Network address (wss://rpc-node.gear-tech.io:443)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_ADDRESS")," is address of IPFS to store NFT assets (",(0,i.kt)("a",{parentName:"li",href:"https://ipfs.gear-tech.io/api/v0"},"https://ipfs.gear-tech.io/api/v0")," was used for Gear Marketplace implementation)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_GATEWAY_ADDRESS")," is IPFS Gateway address (",(0,i.kt)("a",{parentName:"li",href:"https://ipfs-gw.gear-tech.io/ipfs"},"https://ipfs-gw.gear-tech.io/ipfs"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REACT_APP_NFT_CONTRACT_ADDRESS")," is Gear Non-Fungible Token contract address in Gear Network"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REACT_APP_MARKETPLACE_CONTRACT_ADDRESS")," is NFT Marketplace contract address in Gear Network")),(0,i.kt)("h3",{id:"simple-nft"},"Simple NFT"),(0,i.kt)("p",null,"Another example of an interface that demonstrates how to work with a smart contract can be found at the link: ",(0,i.kt)("a",{parentName:"p",href:"https://nft.gear-tech.io"},"https://nft.gear-tech.io"),"."),(0,i.kt)("p",null,"It implements the ability to mint NFTs, view all NFTs minted by any account in the contract, as well as view NFTs that someone has approved to the current account (",(0,i.kt)("inlineCode",{parentName:"p"},"AprovedToMe"),") with the possibility of further transfer to another account (this option is not available in the ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.gear-tech.io/"},"NFT Marketplace")," application)."),(0,i.kt)("p",null,"A Simple NFT application example is available on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/nft"},"GitHub"),"."),(0,i.kt)("h3",{id:"how-to-run"},"How to run"),(0,i.kt)("p",null,"Install required dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install\n")),(0,i.kt)("p",null,"Run the app in the development mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm start\n")),(0,i.kt)("p",null,"Open http://localhost:3000 to view it in the browser."),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("p",null,"The source code of this example of NFT marketplace smart contract and the example of an implementation of its testing is available on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/non-fungible-token/tree/master/nft-marketplace"},"Gear-dapps"),"."),(0,i.kt)("p",null,"The Gear JS application code is available in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/marketplace"},"Gear-tech/gear-js"),"."),(0,i.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to the ",(0,i.kt)("a",{parentName:"p",href:"/developing-contracts/testing"},"Program Testing")," article."))}h.isMDXComponent=!0},2080:function(e,t,n){t.Z=n.p+"assets/images/nft-marketplace-dfbe4242ab3d0b0ce94fbe03658186ab.png"}}]);