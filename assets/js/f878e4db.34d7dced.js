"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[4390],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return g}});var t=a(7294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var d=t.createContext({}),l=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},m=function(e){var n=l(e.components);return t.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,r=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(a),g=s,p=c["".concat(d,".").concat(g)]||c[g]||u[g]||r;return a?t.createElement(p,o(o({ref:n},m),{},{components:a})):t.createElement(p,o({ref:n},m))}));function g(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=c;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=a[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7032:function(e,n,a){a.r(n),a.d(n,{assets:function(){return m},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var t=a(7462),s=a(3366),r=(a(7294),a(3905)),o=["components"],i={sidebar_position:10,sidebar_label:"Events"},d="Events",l={unversionedId:"api/events",id:"api/events",title:"Events",description:"Events are generated for certain operations during execution. The following sections describe events that are part of the default Gear runtime.",source:"@site/docs/api/events.mdx",sourceDirName:"api",slug:"/api/events",permalink:"/api/events",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/events.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"Events"},sidebar:"tutorialSidebar",previous:{title:"Mailbox",permalink:"/api/mailbox"},next:{title:"Cookbook",permalink:"/api/extra-queries"}},m={},u=[{value:"Gear Events Types",id:"gear-events-types",level:2},{value:"MessageEnqueued",id:"messageenqueued",level:3},{value:"UserMessageSent",id:"usermessagesent",level:3},{value:"UserMessageSent",id:"usermessagesent-1",level:3},{value:"MessagesDispatched",id:"messagesdispatched",level:3},{value:"MessageWaited",id:"messagewaited",level:3},{value:"MessageWoken",id:"messagewoken",level:3},{value:"CodeChanged",id:"codechanged",level:3},{value:"ProgramChanged",id:"programchanged",level:3},{value:"Cookbook",id:"cookbook",level:2}],c={toc:u};function g(e){var n=e.components,a=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("p",null,"Events are generated for certain operations during execution. The following sections describe events that are part of the default Gear runtime."),(0,r.kt)("p",null,"To subscribe to all events:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'\nimport { GearApi } from "@gear-js/api";\n\nGearApi.query.system.events((events) => {\n    console.log(events)\n}\n\n')),(0,r.kt)("h2",{id:"gear-events-types"},"Gear Events Types"),(0,r.kt)("h3",{id:"messageenqueued"},"MessageEnqueued"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," When a user successfully sends a message to a program and it gets added to the Gear message queue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"\nMessageEnqueued {\n    /// Generated id of the message.\n    id: MessageId,\n    /// Account id of the source of the message.\n    source: T::AccountId,\n    /// Program id, who is a destination of the message.\n    destination: ProgramId,\n    /// Entry point for processing of the message.\n    /// On the sending stage, processing function\n    /// of program is always known.\n    entry: Entry,\n}\n\n")),(0,r.kt)("h3",{id:"usermessagesent"},"UserMessageSent"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," When someone has sent a message to the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"UserMessageSent {\n    /// Message sent.\n    message: StoredMessage,\n    /// Block number of expiration from `Mailbox`.\n    ///\n    /// Equals `Some(_)` with block number when message\n    /// will be removed from `Mailbox` due to some\n    /// reasons (see #642, #646 and #1010).\n    ///\n    /// Equals `None` if message wasn't inserted to\n    /// `Mailbox` and appears as only `Event`.\n    expiration: Option<T::BlockNumber>,\n}\n")),(0,r.kt)("h3",{id:"usermessagesent-1"},"UserMessageSent"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:"),' When a message has been marked as "read" and it has been removed from the ',(0,r.kt)("inlineCode",{parentName:"p"},"Mailbox"),". This event only affects messages, which were already prior inserted into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mailbox"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"UserMessageRead {\n    /// Id of the message read.\n    id: MessageId,\n    /// The reason of the reading (removal from `Mailbox`).\n    ///\n    /// NOTE: See more docs about reasons at `gear_common::event`.\n    reason: UserMessageReadReason,\n}\n")),(0,r.kt)("h3",{id:"messagesdispatched"},"MessagesDispatched"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," The result of when a message is processed within the block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"MessagesDispatched {\n    /// Total amount of messages removed from message queue.\n    total: MessengerCapacityOf<T>,\n    /// Execution statuses of the messages, which were already known\n    /// by `Event::MessageEnqueued` (sent from user to program).\n    statuses: BTreeMap<MessageId, DispatchStatus>,\n    /// Ids of programs, which state changed during queue processing.\n    state_changes: BTreeSet<ProgramId>,\n}\n")),(0,r.kt)("h3",{id:"messagewaited"},"MessageWaited"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," When a message's execution has been delayed and it has been added to the Gear waitlist."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"MessageWaited {\n    /// Id of the message waited.\n    id: MessageId,\n    /// Origin message id, which started messaging chain with programs,\n    /// where currently waited message was created.\n    ///\n    /// Used for identifying by user, that this message associated\n    /// with him and with the concrete initial message.\n    origin: Option<MessageId>,\n    /// The reason of the waiting (addition to `Waitlist`).\n    ///\n    /// NOTE: See more docs about reasons at `gear_common::event`.\n    reason: MessageWaitedReason,\n    /// Block number of expiration from `Waitlist`.\n    ///\n    /// Equals block number when message will be removed from `Waitlist`\n    /// due to some reasons (see #642, #646 and #1010).\n    expiration: T::BlockNumber,\n}\n")),(0,r.kt)("h3",{id:"messagewoken"},"MessageWoken"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," When a message is ready to continue its execution and has been removed from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Waitlist"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"MessageWoken {\n    /// Id of the message woken.\n    id: MessageId,\n    /// The reason of the waking (removal from `Waitlist`).\n    ///\n    /// NOTE: See more docs about reasons at `gear_common::event`.\n    reason: MessageWokenReason,\n}\n")),(0,r.kt)("h3",{id:"codechanged"},"CodeChanged"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," When a program's code has been altered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"CodeChanged {\n    /// Id of the code affected.\n    id: CodeId,\n    /// Change applied on code with current id.\n    ///\n    /// NOTE: See more docs about change kinds at `gear_common::event`.\n    change: CodeChangeKind<T::BlockNumber>,\n}\n")),(0,r.kt)("h3",{id:"programchanged"},"ProgramChanged"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Summary:")," Any data related to program changed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"ProgramChanged {\n    /// Id of the program affected.\n    id: ProgramId,\n    /// Change applied on program with current id.\n    ///\n    /// NOTE: See more docs about change kinds at `gear_common::event`.\n    change: ProgramChangeKind<T::BlockNumber>,\n}\n")),(0,r.kt)("h2",{id:"cookbook"},"Cookbook"),(0,r.kt)("p",null,"Example of listening to events to check if specified program has been initialized:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { GearApi, Hex, MessageEnqueued, ProgramChanged, UserMessageSent } from '@gear-js/api';\nimport { UnsubscribePromise } from '@polkadot/api/types';\n\nexport function waitForInit(api: GearApi, programId: string): Promise<UnsubscribePromise> {\n  let messageId: Hex;\n  return new Promise((resolve, reject) => {\n    const unsub = api.query.system.events((events) => {\n      events.forEach(({ event }) => {\n        switch (event.method) {\n          case 'MessageEnqueued':\n            const meEvent = event as MessageEnqueued;\n            if (meEvent.data.destination.eq(programId) && meEvent.data.entry.isInit) {\n              messageId = meEvent.data.id.toHex();\n            }\n            break;\n          case 'UserMessageSent':\n            const {\n              data: {\n                message: { source, reply, payload },\n              },\n            } = event as UserMessageSent;\n            if (source.eq(programId) && reply.isSome && reply.unwrap()[0].eq(messageId) && reply.unwrap()[1].eq(1)) {\n              reject(payload.toHuman());\n            }\n            break;\n          case 'ProgramChanged':\n            const pcEvent = event as ProgramChanged;\n            if (pcEvent.data.id.eq(programId) && pcEvent.data.change.isActive) {\n              resolve(unsub);\n            }\n            break;\n        }\n      });\n    });\n  });\n}\n")))}g.isMDXComponent=!0}}]);